services:
  postgresql:
    container_name: temporal-postgresql
    image: postgres:15.4
    environment:
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
      POSTGRES_DB: temporal
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 15s
      retries: 10
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d

  temporal:
    container_name: temporal
    depends_on:
      - postgresql
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    image: temporalio/auto-setup:1.21.3
    ports:
      - 7233:7233
    volumes:
      - ./examples/temporal/config/dynamicconfig:/etc/temporal/config/dynamicconfig
    labels:
      kompose.volume.type: configMap
    healthcheck:
      test:
        [
          "CMD",
          "tctl",
          "--address",
          "temporal:7233",
          "workflow",
          "list"
        ]
      interval: 1s
      timeout: 5s
      retries: 30

  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:1.21.3
    stdin_open: true
    tty: true

  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:2.22.2
    ports:
      - 8080:8080

  harness:
    platform: linux/amd64
    build:
      context: .
      target: development
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=development
      - PORT=3010
    develop:
      watch:
      - action: sync
        path: .
        target: /home/node/app
        ignore:
          - node_modules/
    depends_on:
      temporal:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3010/health || exit 1"]
      interval: 15s
      timeout: 15s
      retries: 10
    command: ["sh", "-c", "npm install && npm run start:all"]

  hotmesh-ui:
    image: hotmeshio/hotmesh-ui:v0.0.3
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-8118}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      HONEYCOMB_ENABLED: ${HONEYCOMB_ENABLED:-false}
      HONEYCOMB_API_KEY: ${HONEYCOMB_API_KEY}
      HONEYCOMB_SERVICE_NAME: ${HONEYCOMB_SERVICE_NAME}
      HONEYCOMB_ENVIRONMENT: ${HONEYCOMB_ENVIRONMENT}
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME}
    volumes:
      - ./.hotmesh.config.json:/app/.hotmesh.config.json:ro
    ports:
      - "${PORT:-8118}:${PORT:-8118}"
    depends_on:
      harness:
        condition: service_healthy

volumes:
  db_data:
    driver: local
